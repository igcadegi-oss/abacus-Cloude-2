// ext/components/Abacus.js - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ—Ä–æ–±–∞–Ω —Å Drag & Drop

/**
 * Abacus - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–∞–∫—É—Å–∞ (—Å–æ—Ä–æ–±–∞–Ω–∞)
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫–∞–∂–¥–∞—è —Å—Ç–æ–π–∫–∞ –∏–º–µ–µ—Ç 1 –≤–µ—Ä—Ö–Ω—é—é –±—É—Å–∏–Ω—É (Heaven, 5) –∏ 4 –Ω–∏–∂–Ω–∏–µ (Earth, 1+1+1+1)
 * –§–æ—Ä–º—É–ª–∞ –∑–Ω–∞—á–µ–Ω–∏—è: S = 5 * U + L, –≥–¥–µ U = –≤–µ—Ä—Ö–Ω—è—è (0 –∏–ª–∏ 1), L = –Ω–∏–∂–Ω–∏–µ (0-4)
 */
export class Abacus {
  /**
   * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {number} digits - –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–µ–∫ = digits + 1)
   */
  constructor(container, digits = 1) {
    this.container = container;
    this.digits = digits;
    this.columns = digits + 1; // –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ –Ω–∞ 1 –±–æ–ª—å—à–µ —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏!
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–π —Å—Ç–æ–π–∫–∏: { upper: 0|1, lower: 0-4 }
    this.state = Array.from({ length: this.columns }, () => ({
      upper: 0, // 0 = –≤–Ω–∏–∑—É (–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞), 1 = –≤–≤–µ—Ä—Ö—É (–∞–∫—Ç–∏–≤–Ω–∞)
      lower: 0  // 0-4 –±—É—Å–∏–Ω—ã —Å–Ω–∏–∑—É –∞–∫—Ç–∏–≤–Ω—ã
    }));
    
    // –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    this.dragState = {
      active: false,
      beadElement: null,
      columnIndex: null,
      beadType: null, // 'upper' –∏–ª–∏ 'lower'
      beadIndex: null, // –¥–ª—è lower –±—É—Å–∏–Ω (0-3)
      startY: 0,
      initialTransform: 0
    };
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–¥–ª—è removeEventListener)
    this.onDrag = this.onDrag.bind(this);
    this.stopDrag = this.stopDrag.bind(this);
    
    this.render();
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–±–∞–∫—É—Å–∞
   */
  render() {
    this.container.innerHTML = '';
    this.container.className = 'abacus';
    
    // –°–æ–∑–¥–∞—ë–º —Å—Ç–æ–π–∫–∏
    for (let colIndex = 0; colIndex < this.columns; colIndex++) {
      const column = this.createColumn(colIndex);
      this.container.appendChild(column);
    }
    
    console.log(`üßÆ –ê–±–∞–∫—É—Å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω: ${this.columns} —Å—Ç–æ–µ–∫ (—Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å ${this.digits})`);
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç–æ–π–∫–∏
   * @param {number} colIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–π–∫–∏
   * @returns {HTMLElement}
   */
  createColumn(colIndex) {
    const col = document.createElement('div');
    col.className = 'abacus__column';
    col.dataset.col = colIndex;
    
    // –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å (Heaven bead)
    const upperSection = document.createElement('div');
    upperSection.className = 'abacus__upper';
    
    const upperBead = document.createElement('div');
    upperBead.className = 'bead bead--upper';
    upperBead.dataset.col = colIndex;
    upperBead.dataset.type = 'upper';
    upperBead.textContent = '5';
    upperBead.style.transition = 'transform 0.3s linear'; // –ù–û–í–û–ï: –ø–ª–∞–≤–Ω–æ—Å—Ç—å
    
    if (this.state[colIndex].upper === 1) {
      upperBead.classList.add('bead--engaged');
    }
    
    // –ù–û–í–û–ï: Drag & Drop –≤–º–µ—Å—Ç–æ –∫–ª–∏–∫–∞
    this.attachDragHandlers(upperBead, colIndex, 'upper', null);
    
    upperSection.appendChild(upperBead);
    
    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (bar)
    const bar = document.createElement('div');
    bar.className = 'abacus__bar';
    
    // –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å (Earth beads)
    const lowerSection = document.createElement('div');
    lowerSection.className = 'abacus__lower';
    
    for (let i = 0; i < 4; i++) {
      const lowerBead = document.createElement('div');
      lowerBead.className = 'bead bead--lower';
      lowerBead.dataset.col = colIndex;
      lowerBead.dataset.index = i;
      lowerBead.textContent = '1';
      lowerBead.style.transition = 'transform 0.3s linear'; // –ù–û–í–û–ï: –ø–ª–∞–≤–Ω–æ—Å—Ç—å
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —ç—Ç–∞ –±—É—Å–∏–Ω–∞
      if (i < this.state[colIndex].lower) {
        lowerBead.classList.add('bead--engaged');
      }
      
      // –ù–û–í–û–ï: Drag & Drop –≤–º–µ—Å—Ç–æ –∫–ª–∏–∫–∞
      this.attachDragHandlers(lowerBead, colIndex, 'lower', i);
      
      lowerSection.appendChild(lowerBead);
    }
    
    col.append(upperSection, bar, lowerSection);
    return col;
  }
  
  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ drag & drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫ –±—É—Å–∏–Ω–µ
   * @param {HTMLElement} beadElement - DOM —ç–ª–µ–º–µ–Ω—Ç –±—É—Å–∏–Ω—ã
   * @param {number} colIndex - –ò–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏
   * @param {string} beadType - 'upper' –∏–ª–∏ 'lower'
   * @param {number|null} beadIndex - –ò–Ω–¥–µ–∫—Å –¥–ª—è lower –±—É—Å–∏–Ω (0-3)
   */
  attachDragHandlers(beadElement, colIndex, beadType, beadIndex) {
    // –ú—ã—à—å: –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    beadElement.addEventListener('mousedown', (e) => {
      this.startDrag(e, beadElement, colIndex, beadType, beadIndex);
    });
    
    // Touch: –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    beadElement.addEventListener('touchstart', (e) => {
      this.startDrag(e, beadElement, colIndex, beadType, beadIndex);
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    beadElement.addEventListener('selectstart', (e) => e.preventDefault());
  }
  
  /**
   * –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
   */
  startDrag(event, beadElement, colIndex, beadType, beadIndex) {
    event.preventDefault();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
    const clientY = event.type.includes('touch') 
      ? event.touches[0].clientY 
      : event.clientY;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π transform
    const style = window.getComputedStyle(beadElement);
    const matrix = new DOMMatrix(style.transform);
    const currentTransformY = matrix.m42; // translateY value
    
    this.dragState = {
      active: true,
      beadElement,
      columnIndex: colIndex,
      beadType,
      beadIndex,
      startY: clientY,
      initialTransform: currentTransformY
    };
    
    // –£–±–∏—Ä–∞–µ–º transition –Ω–∞ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    beadElement.style.transition = 'none';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π feedback
    beadElement.style.cursor = 'grabbing';
    beadElement.style.zIndex = '10';
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.addEventListener('mousemove', this.onDrag);
    document.addEventListener('mouseup', this.stopDrag);
    document.addEventListener('touchmove', this.onDrag);
    document.addEventListener('touchend', this.stopDrag);
    
    console.log(`üßÆ –ù–∞—á–∞–ª–æ drag: –∫–æ–ª–æ–Ω–∫–∞ ${colIndex}, —Ç–∏–ø ${beadType}`);
  }
  
  /**
   * –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
   */
  onDrag(event) {
    if (!this.dragState.active) return;
    
    const clientY = event.type.includes('touch') 
      ? event.touches[0].clientY 
      : event.clientY;
    
    const deltaY = clientY - this.dragState.startY;
    const newTransform = this.dragState.initialTransform + deltaY;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –æ—Å–∏ Y
    const { beadType } = this.dragState;
    let clampedTransform;
    
    if (beadType === 'upper') {
      // –í–µ—Ä—Ö–Ω—è—è –±—É—Å–∏–Ω–∞: –æ—Ç 0 (–≤–≤–µ—Ä—Ö—É) –¥–æ 50px (–≤–Ω–∏–∑—É —É bar)
      clampedTransform = Math.max(0, Math.min(50, newTransform));
    } else {
      // –ù–∏–∂–Ω–∏–µ –±—É—Å–∏–Ω—ã: –æ—Ç -40px (–≤–≤–µ—Ä—Ö—É —É bar) –¥–æ 0 (–≤–Ω–∏–∑—É)
      clampedTransform = Math.max(-40, Math.min(0, newTransform));
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º transform
    this.dragState.beadElement.style.transform = `translateY(${clampedTransform}px)`;
  }
  
  /**
   * –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
   */
  stopDrag(event) {
    if (!this.dragState.active) return;
    
    const { beadElement, columnIndex, beadType, beadIndex } = this.dragState;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    const style = window.getComputedStyle(beadElement);
    const matrix = new DOMMatrix(style.transform);
    const finalTransformY = matrix.m42;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º transition
    beadElement.style.transition = 'transform 0.3s linear';
    beadElement.style.cursor = 'grab';
    beadElement.style.zIndex = '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏
    if (beadType === 'upper') {
      // –ï—Å–ª–∏ –±—É—Å–∏–Ω–∞ –Ω–∏–∂–µ 25px (—Å–µ—Ä–µ–¥–∏–Ω–∞) ‚Üí engaged (1), –∏–Ω–∞—á–µ ‚Üí 0
      const shouldEngage = finalTransformY > 25;
      this.state[columnIndex].upper = shouldEngage ? 1 : 0;
    } else {
      // –î–ª—è –Ω–∏–∂–Ω–∏—Ö –±—É—Å–∏–Ω: –µ—Å–ª–∏ –≤—ã—à–µ -20px ‚Üí engaged
      const shouldEngage = finalTransformY < -20;
      
      if (shouldEngage) {
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –±—É—Å–∏–Ω—ã –¥–æ —ç—Ç–æ–π –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        this.state[columnIndex].lower = beadIndex + 1;
      } else {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –±—É—Å–∏–Ω—ã –ø–æ—Å–ª–µ —ç—Ç–æ–π
        this.state[columnIndex].lower = Math.min(this.state[columnIndex].lower, beadIndex);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
    this.updateColumn(columnIndex);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º drag state
    this.dragState.active = false;
    
    // –£–±–∏—Ä–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.removeEventListener('mousemove', this.onDrag);
    document.removeEventListener('mouseup', this.stopDrag);
    document.removeEventListener('touchmove', this.onDrag);
    document.removeEventListener('touchend', this.stopDrag);
    
    console.log(`üßÆ –ö–æ–Ω–µ—Ü drag: –∫–æ–ª–æ–Ω–∫–∞ ${columnIndex}, –∑–Ω–∞—á–µ–Ω–∏–µ = ${this.getColumnValue(columnIndex)}`);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∞ –æ–¥–Ω–æ–π —Å—Ç–æ–π–∫–∏
   * @param {number} colIndex
   */
  updateColumn(colIndex) {
    const column = this.container.querySelector(`.abacus__column[data-col="${colIndex}"]`);
    if (!column) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –±—É—Å–∏–Ω—É
    const upperBead = column.querySelector('.bead--upper');
    if (this.state[colIndex].upper === 1) {
      upperBead.classList.add('bead--engaged');
      upperBead.style.transform = 'translateY(50px)';
    } else {
      upperBead.classList.remove('bead--engaged');
      upperBead.style.transform = 'translateY(0)';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–µ –±—É—Å–∏–Ω—ã
    const lowerBeads = column.querySelectorAll('.bead--lower');
    lowerBeads.forEach((bead, index) => {
      if (index < this.state[colIndex].lower) {
        bead.classList.add('bead--engaged');
        bead.style.transform = 'translateY(-8px)';
      } else {
        bead.classList.remove('bead--engaged');
        bead.style.transform = 'translateY(0)';
      }
    });
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–π–∫–∏ (S = 5*U + L)
   * @param {number} colIndex
   * @returns {number}
   */
  getColumnValue(colIndex) {
    const { upper, lower } = this.state[colIndex];
    return 5 * upper + lower;
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ —Å –∞–±–∞–∫—É—Å–∞ (—á–∏—Ç–∞–µ–º —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ)
   * @returns {number}
   */
  getValue() {
    let result = 0;
    for (let i = 0; i < this.columns; i++) {
      const power = this.columns - 1 - i; // –ø–æ–∑–∏—Ü–∏—è —Ä–∞–∑—Ä—è–¥–∞
      result += this.getColumnValue(i) * Math.pow(10, power);
    }
    return result;
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∞–±–∞–∫—É—Å–µ
   * @param {number} value - –ß–∏—Å–ª–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  setValue(value) {
    const digits = String(value).padStart(this.columns, '0').split('');
    
    digits.forEach((digit, index) => {
      const num = parseInt(digit, 10);
      
      // –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ 5*U + L
      if (num >= 5) {
        this.state[index].upper = 1;
        this.state[index].lower = num - 5;
      } else {
        this.state[index].upper = 0;
        this.state[index].lower = num;
      }
      
      this.updateColumn(index);
    });
    
    console.log(`üßÆ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: ${value}`);
  }
  
  /**
   * –°–±—Ä–æ—Å –∞–±–∞–∫—É—Å–∞ (–≤—Å–µ –±—É—Å–∏–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
   */
  reset() {
    this.state.forEach((col, index) => {
      col.upper = 0;
      col.lower = 0;
      this.updateColumn(index);
    });
    console.log('üßÆ –ê–±–∞–∫—É—Å —Å–±—Ä–æ—à–µ–Ω');
  }
}
